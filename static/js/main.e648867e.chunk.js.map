{"version":3,"sources":["priceSummaryFeed/PriceAggregator.js","priceSummaryFeed/PriceFeedFactory.js","priceSummaryFeed/feed.js","data.js","reducer.js","Components.js","Dashboard.js","serviceWorker.js","index.js"],"names":["PriceAggregator","initialPriceFeeds","this","priceFeeds","counter","Array","isArray","push","timeFrame","timer","interval","merge","map","pf","pipe","val","symbol","providerName","commission","buffer","x","aggregator","publish","priceFeed","input","reduced","reduce","result","timestamp","Object","values","summary","value","buyPrice","bestBuyPrice","spread","sellPrice","provider","bestSellPrice","initPriceSummary","Date","now","PriceFeedFactory","dataInterval","getRandomElement","arr","Math","floor","random","length","pp$","connect","feed","getFeedForSymbol","feedsArr","fill","newFeed","getFeedForTimeFrame","getFeed","acc","el","availableSymbols","createRandomNotification","id","text","status","getRandomArrayElement","initState","notifications","data","theme","palette","type","actions","notificationsReducer","state","action","n","payload","filter","dataReducer","themeReducer","reducer","useStyles","makeStyles","formControl","margin","spacing","NotificationsContainer","props","List","dense","slice","reverse","k","icon","ListItem","key","ListItemAvatar","Avatar","ListItemText","primary","secondary","toISOString","ListItemSecondaryAction","IconButton","edge","onClick","dispatch","ChartContainer","React","memo","myRef","useRef","useEffect","cleanUp","domEl","w","h","chart","createChart","width","height","timeScale","timeVisible","secondsVisible","borderColor","layout","backgroundColor","textColor","grid","vertLines","color","style","LineStyle","Dotted","horzLines","buySeries","addAreaSeries","topColor","bottomColor","lineColor","lineWidth","sellSeries","setData","sub","subscribe","update","time","err","console","error","log","resizeObserver","ResizeObserver","e","applyOptions","target","clientWidth","clientHeight","observe","remove","unsubscribe","unobserve","makeChart","current","ref","className","SymbolSwitchWidget","classes","FormControl","component","FormLabel","RadioGroup","row","name","onChange","i","FormControlLabel","control","Radio","label","ControlWidget","useState","setState","FormGroup","Switch","checked","labelPlacement","Button","variant","fullWidth","ResponsiveGridLayout","WidthProvider","Responsive","Dashboard","useReducer","themeConfig","createMuiTheme","layouts","lg","y","ThemeProvider","Paper","AppBar","position","Toolbar","Typography","rowHeight","breakpoints","md","sm","xs","xxs","cols","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e648867e.chunk.js","sourcesContent":["import { interval, merge } from 'rxjs'\r\nimport { map, publish, buffer } from 'rxjs/operators'\r\n\r\nclass PriceAggregator {\r\n    constructor(initialPriceFeeds) {\r\n        this.priceFeeds = []\r\n        this.counter = 0\r\n        if (Array.isArray(initialPriceFeeds)) {\r\n            this.priceFeeds = initialPriceFeeds\r\n        } else {\r\n            this.priceFeeds.push(initialPriceFeeds)\r\n        }\r\n    }\r\n\r\n    getFeedForTimeFrame(timeFrame) {\r\n        //timer ticking every 'timeFrame' seconds\r\n        const timer = interval(timeFrame * 1000)\r\n        //create the aggregated feed\r\n        const feed = merge(\r\n            //augment all feeds output to include their extended PriceFeed props\r\n            ...this.priceFeeds.map(\r\n                pf => pf.pipe(\r\n                    map(val => ({\r\n                        symbol: pf.symbol,\r\n                        providerName: pf.providerName,\r\n                        commission: pf.commission,\r\n                        ...val\r\n                    }))\r\n                )\r\n            )).pipe(\r\n                //buffer output between timer ticks\r\n                buffer(timer),\r\n                //aggregate the buffered output\r\n                //uses custom aggregator function\r\n                map(x => this.aggregator(x)),\r\n                //publish as ConnectableObservable\r\n                publish()\r\n            )\r\n        //console.log('FEED :: ', feed)\r\n        return feed\r\n    }\r\n\r\n    addPriceFeed(priceFeed) {\r\n        this.priceFeeds.push(priceFeed)\r\n    }\r\n\r\n    removePriceFeed(providerName) {\r\n\r\n    }\r\n\r\n    aggregator(input) {\r\n        //console.log('input :: ', input);\r\n        const reduced = input.reduce((result, pf) => {\r\n            if (!result[`${pf.providerName}-${pf.symbol}`]) {\r\n                result[`${pf.providerName}-${pf.symbol}`] = pf\r\n            } else if (\r\n                result[`${pf.providerName}-${pf.symbol}`].timestamp < pf.timestamp\r\n            ) {\r\n                result[`${pf.providerName}-${pf.symbol}`] = pf\r\n            }\r\n            return result\r\n        }, {})\r\n        //console.log('reduced :: ', reduced)\r\n        //console.log('count :: ', Object.values(reduced).length)\r\n        return Object.values(\r\n            Object.values(reduced).reduce((summary, pf) => {\r\n                //does symbol exists as key ?\r\n                if (!summary[pf.symbol]) {\r\n                    summary[pf.symbol] = this.initPriceSummary(pf)\r\n                } else {\r\n                    if (pf.value.buyPrice > summary[pf.symbol].bestBuyPrice.value) {\r\n                        summary[pf.symbol].bestBuyPrice = {\r\n                            value: pf.value.buyPrice,\r\n                            spread: pf.value.buyPrice - pf.value.sellPrice,\r\n                            provider: pf.providerName,\r\n                        }\r\n                    }\r\n                    if (pf.value.sellPrice < summary[pf.symbol].bestSellPrice.value) {\r\n                        summary[pf.symbol].bestSellPrice = {\r\n                            value: pf.value.sellPrice,\r\n                            spread: pf.value.sellPrice - pf.value.buyPrice,\r\n                            provider: pf.providerName\r\n                        }\r\n                    }\r\n                }\r\n                return summary\r\n            }, {})\r\n        )\r\n    }\r\n\r\n    initPriceSummary(pf) {\r\n        return {\r\n            symbol: pf.symbol,\r\n            timestamp: Date.now(),\r\n            bestBuyPrice: {\r\n                value: pf.value.buyPrice,\r\n                spread: pf.value.buyPrice - pf.value.sellPrice,\r\n                provider: pf.providerName,\r\n            },\r\n            bestSellPrice: {\r\n                value: pf.value.sellPrice,\r\n                spread: pf.value.sellPrice - pf.value.buyPrice,\r\n                provider: pf.providerName\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    PriceAggregator\r\n}","import { interval } from 'rxjs'\r\nimport { map, publish } from 'rxjs/operators'\r\n\r\nconst PriceFeedFactory = (dataInterval) => {\r\n    //create random type PricePoint = Timestamp<PriceOffer>\r\n    const randomPricePoint = () => {\r\n        return {\r\n            value: {\r\n                //Math.random() * (max - min) + min;\r\n                buyPrice: Math.random() * (250 - 185) + 185,\r\n                sellPrice: Math.random() * (250 - 185) + 185,\r\n            },\r\n            timestamp: Date.now()\r\n        }\r\n    };\r\n    const getRandomElement = (arr) => {\r\n        return arr[Math.floor((Math.random()*arr.length))];\r\n    }\r\n    const randomProviders = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\r\n    const randomSymbols = ['USD', 'BGN', 'GBR', 'YEN']\r\n    const pp$ = interval(dataInterval)\r\n        .pipe(\r\n            map(x => randomPricePoint()),\r\n            publish()\r\n        );\r\n    //add the PriceFeed extension class props ? or add them to the output ???\r\n    pp$.symbol = getRandomElement(randomSymbols)\r\n    pp$.providerName = getRandomElement(randomProviders)\r\n    pp$.commission = Math.random() * (0.1 - 0.03) + 0.03\r\n\r\n    //should I connect immediately ?\r\n    pp$.connect()\r\n    //log\r\n    //console.log('pp$ created :: ', pp$)\r\n    //return\r\n    return pp$\r\n}\r\n\r\nexport {\r\n    PriceFeedFactory\r\n}","import { map }  from 'rxjs/operators'\r\n\r\n//custom\r\nimport { PriceAggregator } from './PriceAggregator.js'\r\nimport { PriceFeedFactory } from './PriceFeedFactory.js'\r\n\r\nlet feed = null\r\n\r\nconst getFeed = () => {\r\n    if (feed) {\r\n        return feed\r\n    }\r\n    const feedsCount = 60\r\n    const feedsArr = Array(feedsCount).fill(null).map(() => PriceFeedFactory(Math.floor(Math.random() * (500 - 300) + 300)))\r\n\r\n    const aggr = new PriceAggregator(feedsArr)\r\n\r\n    const newFeed = aggr.getFeedForTimeFrame(2)\r\n    /* const feedCon = */ newFeed.connect()\r\n    //set the feed \r\n    feed = newFeed\r\n    //return\r\n    return newFeed\r\n}\r\n\r\nconst getFeedForSymbol = (symbol) => {\r\n    return getFeed().pipe(\r\n        //reduce output to only the symbol from agrs\r\n        map(x => x.reduce((acc, el) => {\r\n            if (el.symbol === symbol) {\r\n                acc = el\r\n            }\r\n            return acc\r\n        }, null)),\r\n    )\r\n}\r\n\r\nconst availableSymbols = ['USD', 'BGN', 'GBR', 'YEN']\r\n\r\nexport {\r\n    getFeed,\r\n    getFeedForSymbol,\r\n    availableSymbols\r\n}","import { interval } from 'rxjs'\r\nimport { map } from 'rxjs/operators'\r\nimport { createChart, LineStyle } from 'lightweight-charts'\r\nimport {\r\n    getFeedForSymbol\r\n} from './priceSummaryFeed/feed'\r\n\r\n//create notifications feed\r\nconst createObservable = () => {\r\n    return interval(2000).pipe(\r\n        map(x => createRandomNotification())\r\n    )\r\n}\r\n\r\n//create chart\r\nconst makeChart = (domEl, w, h, symbol) => {\r\n    //console.log(`${symbol} chart :: `, [w, h])\r\n    //get main feed\r\n    const feed = getFeedForSymbol(symbol)\r\n    //chart configuration\r\n    const chart = createChart(domEl, {\r\n        width: w ? w : 0,\r\n        height: h ? h : 0,\r\n        timeScale: {\r\n            timeVisible: true,\r\n            secondsVisible: true,\r\n            borderColor: 'rgba(197, 203, 206, 0.4)',\r\n        },\r\n        layout: {\r\n            backgroundColor: '#100841',\r\n            textColor: '#ffffff',\r\n        },\r\n        grid: {\r\n            vertLines: {\r\n                color: 'rgba(197, 203, 206, 0.4)',\r\n                style: LineStyle.Dotted,\r\n            },\r\n            horzLines: {\r\n                color: 'rgba(197, 203, 206, 0.4)',\r\n                style: LineStyle.Dotted,\r\n            },\r\n        },\r\n    })\r\n    //series\r\n    const buySeries = chart.addAreaSeries({\r\n        topColor: 'rgba(67, 83, 254, 0.7)',\r\n        bottomColor: 'rgba(67, 83, 254, 0.3)',\r\n        lineColor: 'rgba(67, 83, 254, 1)',\r\n        lineWidth: 2,\r\n    })\r\n    const sellSeries = chart.addAreaSeries({\r\n        topColor: 'rgba(255, 192, 0, 0.7)',\r\n        bottomColor: 'rgba(255, 44, 44, 0.3)',\r\n        lineColor: 'rgba(255, 44, 44, 1)',\r\n        lineWidth: 2,\r\n    })\r\n    buySeries.setData([])\r\n    sellSeries.setData([])\r\n    //sub to the source\r\n    const sub = feed.subscribe(\r\n        (data) => {\r\n            //update chart series\r\n            if (data) {\r\n                buySeries.update({ time: Math.floor(data.timestamp * 0.001), value: data.bestBuyPrice.value })\r\n                sellSeries.update({ time: Math.floor(data.timestamp * 0.001), value: data.bestSellPrice.value })\r\n            }\r\n        },\r\n        (err) => console.error(err),\r\n        () => console.log('Data Feed Completed !')\r\n    )\r\n    //set resize listener to make the chart responsive on resize\r\n    const resizeObserver = new ResizeObserver((e) => {\r\n        chart.applyOptions({ width: e[0].target.clientWidth, height: e[0].target.clientHeight })\r\n    })\r\n    resizeObserver.observe(domEl)\r\n\r\n    //return cleanup function\r\n    return () => {\r\n        //remove chart with its DOM elements\r\n        chart.remove()\r\n        //unsub the feed\r\n        sub.unsubscribe()\r\n        //remove resize listener\r\n        resizeObserver.unobserve(domEl)\r\n    }\r\n}\r\n\r\n//helpers\r\nconst createRandomNotification = () => ({\r\n    id: Date.now(),\r\n    text: 'Auto Generated Notification',\r\n    status: getRandomArrayElement(['success', 'error', 'info'])\r\n})\r\n\r\nconst getRandomArrayElement = (arr) => {\r\n    return arr[Math.floor(Math.random() * arr.length)]\r\n}\r\n\r\nexport {\r\n    createObservable,\r\n    createRandomNotification,\r\n    makeChart,\r\n}","//using simple reducer to manage local state with React 'useReducer' hook\r\n//bigger application will require more robust solution like 'Redux'\r\n\r\nimport {\r\n    createRandomNotification,\r\n} from './data'\r\n\r\n//initial state\r\nconst initState = {\r\n    notifications: [\r\n        {\r\n            id: Date.now(),\r\n            text: 'Example success notification !',\r\n            status: 'success'\r\n        }\r\n    ],\r\n    data: {\r\n        symbol: 'BGN'\r\n    },\r\n    theme: {\r\n        palette: {\r\n            type: 'light'\r\n        }\r\n    }\r\n}\r\n\r\n//actions\r\nconst actions = {\r\n    NOTIFICATION_ADD: '[notifications] add',\r\n    NOTIFICATION_REMOVE: '[notifications] remove',\r\n    DATA_SWITCH_SYMBOL: '[data] switch symbol',\r\n    THEME_SWITCH_MODE: '[theme] switch mode'\r\n}\r\n\r\n//notifications reducer\r\nconst notificationsReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case actions.NOTIFICATION_ADD:\r\n            const n = action.payload ? action.payload : createRandomNotification()\r\n            state.push(n)\r\n            return [...state]\r\n        case actions.NOTIFICATION_REMOVE:\r\n            return state.filter(n => n.id !== action.payload ? true : false)\r\n        default:\r\n            return [...state]\r\n    }\r\n}\r\n\r\n//data reducer\r\nconst dataReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case actions.DATA_SWITCH_SYMBOL:\r\n            return {\r\n                ...state,\r\n                symbol: action.payload,\r\n            }\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\n//theme reducer\r\nconst themeReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case actions.THEME_SWITCH_MODE:\r\n            const newState = {\r\n                ...state,\r\n                palette: {\r\n                    ...state.palette,\r\n                    type: state.palette.type === 'light' ? 'dark' : 'light'\r\n                },\r\n            }\r\n            return newState\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\n//main reducer\r\nconst reducer = (state, action) => {\r\n    const newState = {\r\n        notifications: notificationsReducer(state.notifications, action),\r\n        data: dataReducer(state.data, action),\r\n        theme: themeReducer(state.theme, action)\r\n    }\r\n    return newState\r\n}\r\n\r\n\r\n\r\n//exports\r\nexport {\r\n    reducer,\r\n    actions,\r\n    initState\r\n}","//React\r\nimport React, { useEffect, useRef } from 'react'\r\n\r\n//reducer\r\nimport {\r\n    actions\r\n} from './reducer'\r\n\r\n//other\r\nimport {\r\n    makeChart,\r\n} from './data'\r\n\r\nimport {\r\n    availableSymbols\r\n} from './priceSummaryFeed/feed'\r\n\r\n//Material UI Components\r\nimport {\r\n    Button,\r\n    FormControl,\r\n    FormLabel,\r\n    FormControlLabel,\r\n    RadioGroup,\r\n    Radio,\r\n    FormGroup,\r\n    Switch,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    ListItemSecondaryAction,\r\n    List,\r\n    Avatar,\r\n    IconButton,\r\n    makeStyles\r\n} from '@material-ui/core'\r\n\r\n//Material Ui Icons\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport ErrorIcon from '@material-ui/icons/Error'\r\nimport InfoIcon from '@material-ui/icons/Notifications'\r\n\r\nimport './css/styles.css'\r\n\r\n//create styles\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(3),\r\n    },\r\n}))\r\n\r\n/*\r\n * Functional components.\r\n */\r\nconst NotificationsContainer = (props) => {\r\n    return (\r\n        <List dense={false}>\r\n            {props.notifications\r\n                //get last 10 notifications\r\n                .slice(props.notifications.length > 10 ? props.notifications.length - 10 : 0, props.notifications.length)\r\n                //the last shows on top\r\n                .reverse()\r\n                //map to components\r\n                .map((n, k) => {\r\n                    let icon\r\n                    switch (n.status) {\r\n                        case 'error':\r\n                            icon = <ErrorIcon />\r\n                            break\r\n                        case 'success':\r\n                            icon = <DoneIcon />\r\n                            break\r\n                        default:\r\n                            icon = <InfoIcon />\r\n                    }\r\n                    return (\r\n                        <ListItem key={k}>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    {icon}\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={n.text}\r\n                                secondary={`${n.status} : ${new Date(n.id).toISOString()}`}\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton\r\n                                    edge=\"end\"\r\n                                    onClick={() => {\r\n                                        props.dispatch({ type: actions.NOTIFICATION_REMOVE, payload: n.id })\r\n                                    }}>\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    )\r\n                })\r\n            }\r\n        </List>\r\n\r\n    )\r\n}\r\n\r\nconst ChartContainer = React.memo((props) => {\r\n    //get ref to the rendered child element\r\n    const myRef = useRef()\r\n    //use effects to create chart\r\n    useEffect(() => {\r\n        const el = myRef.current\r\n        const cleanUp = makeChart(el, myRef.current.clientWidth, myRef.current.clientHeight, props.symbol, props.action)\r\n        //clear\r\n        return (() => {\r\n            cleanUp()\r\n        })\r\n    })\r\n    return (\r\n        <div ref={myRef} className=\"lw-c\" style={{ width: 'auto', height: 100 + '%' }}></div>\r\n    )\r\n})\r\n\r\nconst SymbolSwitchWidget = React.memo((props) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <div>\r\n            <FormControl component=\"fieldset\" className={classes.formControl}>\r\n                <FormLabel component=\"legend\">Switch Symbol</FormLabel>\r\n                <RadioGroup\r\n                    row\r\n                    name=\"symbol\"\r\n                    value={props.symbol}\r\n                    onChange={(e) => {\r\n                        props.dispatch({ type: actions.DATA_SWITCH_SYMBOL, payload: e.target.value })\r\n                        props.dispatch({\r\n                            type: actions.NOTIFICATION_ADD,\r\n                            payload: {\r\n                                id: Date.now(),\r\n                                text: `Switched to ${e.target.value}`,\r\n                                status: 'success'\r\n                            }\r\n                        })\r\n                    }}>\r\n                    {availableSymbols.map((symbol, i) => {\r\n                        return (\r\n                            <FormControlLabel\r\n                                key={i}\r\n                                value={symbol}\r\n                                control={<Radio color=\"primary\" />}\r\n                                label={symbol}\r\n                            />\r\n                        )\r\n                    })}\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst ControlWidget = React.memo((props) => {\r\n    //local state for switch position\r\n    const [state, setState] = React.useState(true)\r\n    return (\r\n        <div>\r\n            <FormGroup row>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            checked={state}\r\n                            onChange={(e) => {\r\n                                props.dispatch({\r\n                                    type: actions.THEME_SWITCH_MODE\r\n                                })\r\n                                setState(e.target.checked)\r\n                            }}\r\n                            value=\"dummy\"\r\n                            color=\"primary\"\r\n                        />\r\n                    }\r\n                    label=\"Switch Theme Mode\"\r\n                    labelPlacement=\"start\"\r\n                />\r\n            </FormGroup>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                fullWidth={true}\r\n                onClick={() => {\r\n                    props.dispatch({\r\n                        type: actions.NOTIFICATION_ADD,\r\n                        payload: {\r\n                            id: Date.now(),\r\n                            text: 'CUSTOM',\r\n                            status: 'test'\r\n                        }\r\n                    })\r\n                    /* props.dispatch({\r\n                        type: actions.THEME_SWITCH_MODE\r\n                    }) */\r\n                }}\r\n            >Add Notification</Button>\r\n        </div>\r\n    )\r\n})\r\n\r\n//export\r\nexport {\r\n    NotificationsContainer,\r\n    ChartContainer,\r\n    SymbolSwitchWidget,\r\n    ControlWidget\r\n}","//react\r\nimport React, {\r\n    useReducer,\r\n    useEffect\r\n} from 'react'\r\n\r\n//react-grid-layout\r\nimport { Responsive, WidthProvider } from 'react-grid-layout'\r\n\r\n//components\r\nimport {\r\n    NotificationsContainer,\r\n    ChartContainer,\r\n    SymbolSwitchWidget,\r\n    ControlWidget\r\n} from './Components'\r\n\r\n//Material UI Components\r\nimport {\r\n    createMuiTheme,\r\n    Paper,\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    ThemeProvider,\r\n} from '@material-ui/core'\r\n\r\n//reducer\r\nimport {\r\n    reducer,\r\n    initState,\r\n    actions\r\n} from './reducer'\r\n\r\n//data related functions\r\nimport {\r\n    createObservable,\r\n} from './data'\r\n\r\n//CSS\r\nimport './css/react-grid-styles.css'\r\nimport './css/react-resizable-styles .css'\r\n//Fonts\r\nimport 'typeface-roboto'\r\n\r\n//responsive grid component\r\nconst ResponsiveGridLayout = WidthProvider(Responsive)\r\n\r\n\r\nconst Dashboard = (props) => {\r\n    //get state and dispatcher\r\n    const [state, dispatch] = useReducer(reducer, initState)\r\n    //subscribe to notifications feed\r\n    useEffect(() => {\r\n        const sub = createObservable().subscribe(\r\n            (data) => {\r\n                dispatch({\r\n                    type: actions.NOTIFICATION_ADD,\r\n                    payload: data\r\n                })\r\n            },\r\n            (err) => console.error(err),\r\n            () => console.log('Completed !')\r\n        )\r\n        return (() => {\r\n            sub.unsubscribe()\r\n        })\r\n    })\r\n\r\n    //get theme configuration\r\n    const themeConfig = createMuiTheme(state.theme)\r\n\r\n    // layout for react-grid\r\n    const layout = [\r\n        { i: 'a', x: 0, y: 0, w: 4, h: 15 },\r\n        { i: 'b', x: 4, y: 2, w: 8, h: 13 },\r\n        { i: 'c', x: 4, y: 0, w: 2, h: 2 },\r\n        { i: 'd', x: 4, y: 9, w: 8, h: 8 },\r\n        { i: 'e', x: 6, y: 0, w: 6, h: 2 }\r\n    ]\r\n\r\n    const layouts = { lg: layout }\r\n\r\n    return (\r\n        <ThemeProvider theme={themeConfig}>\r\n            <Paper>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\">\r\n                            React-Dashboard\r\n                     </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <ResponsiveGridLayout\r\n                    className=\"layout\"\r\n                    layouts={layouts}\r\n                    rowHeight={40}\r\n                    breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}\r\n                    cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\r\n                >\r\n                    <Paper elevation={3} key=\"a\">\r\n                        <NotificationsContainer notifications={state.notifications} dispatch={dispatch} />\r\n                    </Paper>\r\n                    <Paper elevation={3} key=\"b\">\r\n                        <ChartContainer symbol={state.data.symbol} />\r\n                    </Paper>\r\n                    <Paper elevation={3} key=\"c\">\r\n                        <ControlWidget dispatch={dispatch} />\r\n                    </Paper>\r\n                    <Paper elevation={3} key=\"e\">\r\n                        <SymbolSwitchWidget symbol={state.data.symbol} dispatch={dispatch} />\r\n                    </Paper>\r\n                </ResponsiveGridLayout>\r\n            </Paper>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default Dashboard","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Dashboard from './Dashboard'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<Dashboard />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}